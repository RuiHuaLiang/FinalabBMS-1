//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MODEL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;

    public partial class FinalEntities : DbContext
    {
        public FinalEntities()
            : base("name=FinalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<SystemMessage> SystemMessages { get; set; }
        public DbSet<T_Abnormal> T_Abnormal { get; set; }
        public DbSet<T_AnswerSheet> T_AnswerSheet { get; set; }
        public DbSet<T_AnswerSheetComment> T_AnswerSheetComment { get; set; }
        public DbSet<T_BriefAnswerSheet> T_BriefAnswerSheet { get; set; }
        public DbSet<T_BriefScore> T_BriefScore { get; set; }
        public DbSet<T_ChoiceAnswerSheet> T_ChoiceAnswerSheet { get; set; }
        public DbSet<T_Department> T_Department { get; set; }
        public DbSet<T_InterviewerInfo> T_InterviewerInfo { get; set; }
        public DbSet<T_MemberInformation> T_MemberInformation { get; set; }
        public DbSet<T_OgnizationAct> T_OgnizationAct { get; set; }
        public DbSet<T_OnDuty> T_OnDuty { get; set; }
        public DbSet<T_Organization> T_Organization { get; set; }
        public DbSet<T_Paper> T_Paper { get; set; }
        public DbSet<T_PaperQuestion> T_PaperQuestion { get; set; }
        public DbSet<T_Permission> T_Permission { get; set; }
        public DbSet<T_ProjectInformation> T_ProjectInformation { get; set; }
        public DbSet<T_ProjectParticipation> T_ProjectParticipation { get; set; }
        public DbSet<T_ProjectType> T_ProjectType { get; set; }
        public DbSet<T_ProjPhase> T_ProjPhase { get; set; }
        public DbSet<T_Question> T_Question { get; set; }
        public DbSet<T_QuestionOption> T_QuestionOption { get; set; }
        public DbSet<T_QuestionType> T_QuestionType { get; set; }
        public DbSet<T_Role> T_Role { get; set; }
        public DbSet<T_RoleAct> T_RoleAct { get; set; }
        public DbSet<T_RolePermission> T_RolePermission { get; set; }
        public DbSet<T_TaskInformation> T_TaskInformation { get; set; }
        public DbSet<T_TaskParticipation> T_TaskParticipation { get; set; }
        public DbSet<T_TaskType> T_TaskType { get; set; }
        public DbSet<T_TeacherInfo> T_TeacherInfo { get; set; }
        public DbSet<T_TechnicaLevel> T_TechnicaLevel { get; set; }
        public DbSet<Tbl_Message> Tbl_Message { get; set; }
        public DbSet<Tbl_User_Message> Tbl_User_Message { get; set; }
        public DbSet<T_IsShow> T_IsShow { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
